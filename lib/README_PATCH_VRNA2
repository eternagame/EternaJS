# You shouldn't have to do this again, but as of SHA 2136589f,
# we were using a vendorized 2.1.8 (with, painfully, a lot of
# 2.1.9 characteristics), so this is an illustration of how
# to create patch files. First, obtain 2.1.8 in two locations.
# Then, overwrite files in one of the 2.1.8 versions with our
# versions. This creates patch files that would be able to induce
# the same changes, in principle, on a fresh checkout of (say)
# 2.1.9. Note that those patches are now versioned.

#for f in `ls vrna2` ;do
#	diff ViennaRNA-2.1.8/lib/$f ViennaRNA-2.1.8_pseudopatched/lib/$f > vrna2_patches/$f.patch
#done

# Note -- repeat this procedure with any other verion of Vienna,
# if you want to impose it on Eterna, but in such cases you may
# need to be careful about what parameters you select (for example)
# as Vienna 4, t.b.d., will probably have straight-up better 
# parameters than ours.

for f in `ls ViennaRNA-2.1.8_pseudopatched/lib` ; do
	patch ViennaRNA-2.1.9_pseudopatched/lib/$f < vrna2_patches/$f.patch
done

# There will be hunks that did not succeed in patching. Go through
# them manually. In the above case, most of them were no-ops because
# they reflected the changes that had been manually backported from
# 2.1.9 in the first place. Sometimes they will matter, so be vigilant.
#
# Once you have settled on a final version,
# cp ViennaRNA-2.1.9_pseudopatched/lib/*.c vrna2/
# cp ViennaRNA-2.1.9_pseudopatched/lib/*.h vrna2/
