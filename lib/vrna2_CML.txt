cmake_minimum_required(VERSION 3.10)
project(vrna2)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/dist)
SET(CMAKE_BUILD_TYPE_INIT "Release")
set(CMAKE_CXX_STANDARD 11)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "-Wall -Wextra -I/Users/andrewwatkins/programs/emsdk/upstream/emscripten/system/include")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g2")

include_directories(.)
include_directories(./H)
include_directories(..libsvm-2.91)
include_directories(../emscripten_common)

add_executable(vrna2
	#lib/1.8.4_epars.h
	#lib/1.8.4_intloops.h
        lib/2Dfold.c
		#lib/2Dfold.h
        lib/2Dpfold.c
		#lib/2Dpfold.h
        lib/ali_plex.c
		#lib/ali_plex.h
        lib/alifold.c
		#lib/alifold.h
        lib/aliLfold.c
        lib/alipfold.c
        lib/aln_util.c
		#lib/aln_util.h
        lib/c_plex.c
        lib/cofold.c
		#lib/cofold.h
		#lib/config.h
        lib/convert_epars.c
		#lib/convert_epars.h
		#lib/data_structures.h
        lib/dist_vars.c
		#lib/dist_vars.h
        lib/duplex.c
		#lib/duplex.h
		#lib/edit_cost.h
		#lib/energy_const.h
        lib/energy_par.c
		#lib/energy_par.h
        lib/findpath.c
		#lib/findpath.h
        lib/fold.c
		#lib/fold.h
        lib/fold_vars.c
		#lib/fold_vars.h
        lib/gquad.c
		#lib/gquad.h
		lib/intl11.h
		lib/intl11dH.h
		lib/intl21.h
        lib/intl21dH.h
        lib/intl22.h
        lib/intl22dH.h
        lib/inverse.c
		#lib/inverse.h
        lib/Lfold.c
		#lib/Lfold.h
        lib/list.c
		#lib/list.h
		#lib/loop_energies.h
        lib/LPfold.c
		#lib/LPfold.h
        lib/MEA.c
		#lib/MEA.h
        lib/mm.c
		#lib/mm.h
        lib/move_set.c
		#lib/move_set.h
        lib/naview.c
		#lib/naview.h
		#lib/pair_mat.h
        lib/params.c
		#lib/params.h
        lib/part_func.c
		#lib/part_func.h
        lib/part_func_co.c
		#lib/part_func_co.h
        lib/part_func_up.c
		#lib/part_func_up.h
		#lib/PKplex.h
        lib/plex.c
		#lib/plex.h
        lib/plex_functions.c
        lib/plot_layouts.c
		#lib/plot_layouts.h
        lib/ProfileAln.c
		#lib/ProfileAln.h
        lib/ProfileDist.c
		#lib/profiledist.h
        lib/PS_dot.c
		#lib/PS_dot.h
        lib/read_epars.c
		#lib/read_epars.h
        lib/ribo.c
		#lib/ribo.h
        lib/RNAstruct.c
		#lib/RNAstruct.h
        lib/snofold.c
		#lib/snofold.h
        lib/snoop.c
		#lib/snoop.h
        lib/stringdist.c
		#lib/stringdist.h
        lib/subopt.c
		#lib/subopt.h
        lib/treedist.c
		#lib/treedist.h
        lib/utils.c
		#lib/utils.h
        ../emscripten_common/EmscriptenUtils.cpp
        ../emscripten_common/EmscriptenUtils.h
        emscripten/FullFold.cpp
        emscripten/FullFold.h
        emscripten/FullEval.cpp
        emscripten/FullEval.h emscripten/Bindings.cpp)

if (${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
    set(CMAKE_C_COMPILER "emcc")

    # -s 'EXPORT_NAME=\"vrna2\"' -s MODULARIZE=1: export our module as 'vrna2'
    # --preload-file assets@/ : map all files inside the 'assets' folder to / in the virtual FS
    # -s WASM=1: wasm enabled
    # -s SINGLE_FILE=1: merge all outputs into a single file
    # -s LEGACY_VM_SUPPORT=1: support IE11 (incompatible with WASM=1)
    # -s ALLOW_MEMORY_GROWTH=1: allow the malloc pool to grow at runtime
    #
    # Debugging tools (see https://github.com/kripken/emscripten/blob/master/src/settings.js):
    # -s SAFE_HEAP=1
    set_target_properties(vrna2 PROPERTIES LINK_FLAGS "-s 'EXPORT_NAME=\"vrna2\"' -s MODULARIZE=1 --bind -std=c++11 -s SINGLE_FILE=1 -s ALLOW_MEMORY_GROWTH=1")
    set_target_properties(vrna2 PROPERTIES LINK_FLAGS_DEBUG "-O0 -s WASM=0 -s DEMANGLE_SUPPORT=1 -s ASSERTIONS=2 -s SAFE_HEAP=1")
    set_target_properties(vrna2 PROPERTIES LINK_FLAGS_RELEASE "-O3 -s WASM=1")
endif ()
