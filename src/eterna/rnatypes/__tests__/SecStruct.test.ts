import SecStruct from '../SecStruct'


test(`SecStruct:valid`, () => {
    const str = '..(((((.((....))..))))).(((..((((.(((((((((((....(((...(((((((...(((((((((((...))....)))).)).)))...)))...))))..)))...((((((((......................(((.......)))((((........)))).((((.((((........)))).))))(..((((..((((((..(..(((.......(((((((((.((.......))...))))))))))))....)))))))..))..))...)...(((((((....)))))))........(((((......)))))...((..(((((((((((((.(((((((..((.....))..))))))).))))))..).))))))))(((((((((.......)).)))))))................................((((((((((.....)))).))))))..((....))((((.((((((((((((.((((..(((((.(((((((....)))))))...)))))...)))).((((...........((((((........))))))......(((((((((((((((((.((((((.(((((((..................)))))))))))))(((((((......))).))))))).))))).))))))))).)))).....(((...)))...(((((((((((..((((..(((((((((..(((((....((((.((......))))))..)))))..))))))))).........((((((.((((((((((((((..........((((((......))))).(..((((((.((((.....))))))))).)....))...(((.(((((..(((.(((((((((....((.....))..).)))))))))))(...(((((...........)))))..)......((.((((....))))))((((((...((((((.(((((((((.((((...((....((((((.((((.....)))))))))).((((((..((.(.....((((((...((((..((((.((((((((((((((((((...)))))))))).)))).))))......)))))))).....((((((....)))).....)).((((.(((.((((.((((((((..(((((.(.((....))..).))))).)))))))..)))))))).)))).((((((.(.((((..(((((......)))))..)))))))))))...............))))))......).))..))))))))....)))).)))))))))...))))))..)))))).(((((((..)))))))((....((((((..(((((((((..((((((.....)))))).)))).((((....)))).(((((.(..))))))((((((.......))))).)..(((..........))))))))..)))))).(((((((.((((((((....))).))))).....)))))))))..((((.(((.(........).))).))))......))))).)))((.((((((.......)))))).))((((........))))((((((......((((.....)))).....))))))((.(......((((((((........(((((((((.............)))))))))...(((((((((........((((.(((...))).))))....................((((........)))))))))))))((....)).((.((((((...((((......))))...))))))......))................((((((((((((.......)))............((....((((((((((.....(((........))).....)))))))).)))).......)))))))))....(((((.((.(((((..)))))))))))).....((((((((......)))))))).....)))))))).......).))).))))))))))).((((((((..(((((((((....(((((.........(((((.(((((....((((((((......((((((............................)))))).(((((((((((...(((((..((((((.......))))))..))))).((((((.))))))))))))))))).))))))))((((((((....))))))))............((((..........((...(((...........))).))........))))((((.........))))))))))))))...............(..((((((((.........)))))))).)........(.(.(((((((((((...((((........(((((..(((((((.(((((((.....)))))))..))))))).))))).))))..(((.((((((.......))))))..)))))))))))))))..)...(((...(((((((((..((((.((..(((((.....))))).....).)))))..)))))))))........)))....((..(((((((((.....((((.((((((....)))))).)))).)))))))))))..............((((((((...))))))))....)))))...)))).))))))))))))).....((((((...))))))...........))))))))....))))....)))))))))))......))))))))))))))))...(((((..))))).......(((((((((((.(...........((((((.........))))))..(((.((((.((.(((....))).))......)))))))......)........)))))))))))..((((((.((((((((((...((((((..((((((((((.(((((((....))))))).......))))).))))).))))))((((((.(((((...((((...))))....))).)).))).))).((((((((((.((((((((.........(......)((((...((.((.((((((((......)).)))))).)).))))))(((((....)))))((((((((((((.(.(((....))).))))..))))..)).)))((..((((.(((((((((((((..........((((.((((((((.....))))))))))))....)))))))))......((((.(.....(((((((......((((........)))).((..(((((.(((....))))))))))(((((((.(((((((((....)))).))))).))))))).....))))))))))))(((((.......))))).)))).)))).))............((((((.(((((....))))))))))))))).))))))))))))))..))))))))))......(((((........(((.(.(((((...))))).).))).........)))))..((((((..(.((((((..)))))).)).)))))))))))((((((.....))))))..(((((.(((((..((((((((.((.(.((...(((((((.((((((((((...(((((((.((..((.....))..)))))))))....))))))))((....)))))))))))....))).)).)).)))))).)))..))((.....))...)))))......))..)))))).))))))))......)))..)))).)))..................';
    const pairs = SecStruct.fromParens(str);
    //console.log(pairs);
    for (let ii = 0; ii < str.length; ++ii) {
        if (str[ii] == '.') {
            expect(pairs.pairingPartner(ii)).toEqual(-1);
            expect(pairs.isPaired(ii)).toEqual(false);
        } else if (str[ii] == '(') {
            expect(pairs.pairingPartner(ii)).toBeGreaterThan(ii);
            expect(pairs.isPaired(ii)).toEqual(true);
        } else if (str[ii] == ')') {
            expect(pairs.pairingPartner(ii)).toBeLessThan(ii);
            expect(pairs.isPaired(ii)).toEqual(true);
        }
    }
});

test(`SecStruct:onlyPseudoknots`, () => {
    const str = '(((((...[[[)))))..]]]';
    const pairs = SecStruct.fromParens(str, true);
    expect(pairs.onlyPseudoknots().nonempty()).toEqual(true);
});

test(`SecStruct:getParenthesis`, () => {
    const inputStrs = [
        '((((((......))))))',
        '(((((([[[[......]]]]))))))',
        '((((((...[[[[...))))))]]]]',
        '((((((.{{{{..[[}}}}[[...))))))]]]]',
        '((((((...[[[[...))))))]]]]....((((....))))',
        '((((((.{{..{{..[[.}}}}[.[...))))).)]]].]',
        '((((((...[[{{[[...)))}})))]]]]',
    ];
    const outputStrs = [
        "((((((......))))))",
        "((((((((((......))))))))))",
        "((((((...{{{{...))))))}}}}",
        "((((((.((((..{{)))){{...))))))}}}}",
        "((((((...{{{{...))))))}}}}....((((....))))",
        "((((((.((..((..{{.)))){.{...))))).)}}}.}",
        "((((((...{{{{[[...)))}})))]]}}",
    ];

    for (let i=0; i<inputStrs.length; i++) {
        const ss = SecStruct.fromParens(inputStrs[i], true);
        const dbn = ss.getParenthesis(null, true);
        expect(dbn).toBe(outputStrs[i]);
        expect(SecStruct.fromParens(dbn, true).pairs).toEqual(ss.pairs);
    }
});