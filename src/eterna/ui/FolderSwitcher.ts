import {ContainerObject, Assert, Enableable} from 'flashbang';
import Folder from 'eterna/folding/Folder';
import FolderManager from 'eterna/folding/FolderManager';
import {Value, ValueView} from 'signals';
import {Sprite} from 'pixi.js';
import Bitmaps from 'eterna/resources/Bitmaps';
import BitmapManager from 'eterna/resources/BitmapManager';
import GameDropdown from './GameDropdown';

export default class FolderSwitcher extends ContainerObject implements Enableable {
    public readonly selectedFolder: ValueView<Folder>;

    constructor(canUseFolder?: ((folder: Folder) => boolean), defaultFolder?: Folder, allowChange: boolean = true) {
        super();

        this._canUseFolder = canUseFolder;
        this.selectedFolder = new Value(
            defaultFolder || this.getFolder(FolderManager.instance.getFolders(this._canUseFolder)[0])
        );
        this._allowChange = allowChange;
    }

    protected added() {
        const icon = new Sprite(BitmapManager.getBitmap(Bitmaps.ImgFoldingEngine));
        icon.width = 24;
        icon.height = 24;
        this.display.addChild(icon);
        icon.position.set(0, (32 - icon.height) / 2);
        this.addDropdown(FolderManager.instance.getFolders(this._canUseFolder), this.selectedFolder.value.name);
    }

    private addDropdown(options: string[], selectedOption: string) {
        if (this._dropdown) {
            this.removeObject(this._dropdown);
        }

        this._dropdown = new GameDropdown({
            fontSize: 14,
            options,
            defaultOption: selectedOption,
            color: 0x043468,
            textColor: this.enabled ? 0xFFFFFF : 0x6189A9,
            height: 32,
            borderWidth: 0,
            dropShadow: true
        });
        this._dropdown.disabled = !this.enabled || !this._allowChange;
        this._dropdown.display.position.x = 32;
        this.addObject(this._dropdown, this.container);
        this.regs?.add(this._dropdown.selectedOption.connectNotify((val) => {
            this.selectedFolder.value = this.getFolder(val);
        }));
    }

    public changeFolder(folderName: string): boolean {
        if (this.selectedFolder.value.name === folderName) return true;

        const folder = FolderManager.instance.getFolder(folderName);
        if (!folder || (this._canUseFolder && !this._canUseFolder(folder))) return false;

        this._dropdown.selectedOption.value = folderName;
        return true;
    }

    public set enabled(val: boolean) {
        this._enabled = val;
        this.addDropdown(this._dropdown.options, this.selectedFolder.value.name);
    }

    public get enabled(): boolean {
        return this._enabled;
    }

    private getFolder(name: string) {
        const folder = FolderManager.instance.getFolder(name);
        // We're assured this folder will exist because the dropdown options generated by
        // FolderManager.instance.getFolders are all valid, and we ensure no other values
        // are assigned to the underlying dropdown
        Assert.assertIsDefined(folder);
        return folder;
    }

    private _canUseFolder?: (folder: Folder) => boolean;

    private _allowChange: boolean;
    private _dropdown: GameDropdown;
    private _enabled: boolean = true;
}
